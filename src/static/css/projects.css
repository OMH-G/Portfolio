/* The flip card container - set the width and height to whatever you want. We have added the border property to demonstrate that the flip itself goes out of the box on hover (remove perspective if you don't want the 3D effect */
.flip-card {
    margin: 8px;
    background-color: transparent;
    width: 300px;
    height: 250px;
    border-radius:10px;
    perspective: 8000px; /* Remove this if you don't want the 3D effect */
  }
  
  /* This container is needed to position the front and back side */
  .flip-card-inner {
    position: relative;
    width: 100%;
    height: 100%;
    text-align: center;
    transition: transform 0.9s;
    border-radius:20px;
    box-shadow: 9px 9px lightgray;
    transform-style: preserve-3d;

  }
  a{
    text-decoration:none;
    color:black;
  }
  /* Do an horizontal flip when you move the mouse over the flip box container */
  .flip-card:hover .flip-card-inner {
    transform: rotateY(180deg);
  }
  
  /* Position the front and back side */
  .flip-card-front, .flip-card-back {
    display: flex;
    justify-content:space-around;
    flex-direction: column;
    
    position: absolute;
    border-radius:10px;
    width: 100%;
    height: 100%;
    -webkit-backface-visibility: hidden; 
    backface-visibility: hidden;
  }
  .flip-card-front{
    padding-left: 7px;
  }
  .flip-card-back{
    padding-right: 20px;
    border: 5px solid yellow;
    background-color:purple;
    color: white;
    transform: rotateY(180deg);
  }
  
  /* Style the front side (fallback if image is missing) */
  .flip-card-front {
    background-color: turquoise;
    color: black;
  }
  .cardfoot{
    border: 2px solid black;
    width:100px;
    height:15%; 
    margin:50px 0px ;
    margin-left:auto;
    margin-right: auto;
    border-radius: 10px;
    /* transition: width 2s; */
    transition: 0.1s;
    transition-timing-function: ease-in-out;
    border-style:dashed;
  }
  .cardfoot:hover{
    cursor: pointer;
    background-image:linear-gradient( 180deg,#8EC5FC,#E0C3FC,#21E2BC);
    transform:scale(1.3,1.3);
    width:40%;
    height:18%;
  }
  
  /* Style the back side */
  .spin-proj{
    width: 50px;
    margin: auto;
    margin-top: 200px;
  }
  .videoWrapper {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 */
  }
  .videoWrapper iframe {
    margin-right: auto;
    margin-left: auto;
    position: absolute;
    width: 98%;
    height: 102%;
    top: 0;
    left: 0;
    border-radius:12px;
    border: 3px solid honeydew;
    
  }
  .updated{
    border: 2px solid black;
  }
.container {
  display: flex;
  flex-direction: row;
  justify-content: space-evenly;
  flex-wrap: wrap;
  align-items: center;
}




.spinner {
  --color: rgb(0 255 155);
  --fade-color: rgba(0 255 155 / 50%);
  --scale: 1;
  --x-speed: 1;
  position: relative;
  display: block;
  width: 46px;
  height: 46px;
  transform: scale(var(--scale)) rotateZ(0);
  animation: ps-spin calc(15s / var(--x-speed)) linear infinite
}

@keyframes ps-spin {
  from {
      transform: scale(var(--scale)) rotateZ(0);
  }
  to {
      transform: scale(var(--scale)) rotateZ(-360deg);
  }
}

.spinner span {
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
}

.spinner span::before,
.spinner span::after {
  content: "";
  position: absolute;
  width: 12px;
  height: 12px;
  top: 50%;
  transform: translateY(-50%) scale(.3);
  background-color: rgba(var(--color) / 50%);
  border-radius: 50%;
  animation: ps-spinner-scale calc(1.2s / var(--x-speed)) linear infinite
}

@keyframes ps-spinner-scale {
  0% {
      background-color: var(--fade-color);
      transform: translateY(-50%) scale(.3);
  }
  25% {
      background-color: var(--color);
      transform: translateY(-50%) scale(1);
  }
  80% {
      background-color: var(--fade-color);
      transform: translateY(-50%) scale(.3);
  }
  100% {
      background-color: var(--fade-color);
      transform: translateY(-50%) scale(.3);
  }
}

.spinner span::before {
  left: 0;
}

.spinner span::after {
  right: 0;
}

.spinner span:first-of-type {
  transform: rotateZ(-45deg);
}

.spinner span:last-of-type {
  transform: rotateZ(45deg);
}

.spinner span:nth-of-type(2) {
  transform: rotateZ(90deg);
}

.spinner span:nth-of-type(3)::after {
  animation-delay: calc(0.15s / var(--x-speed));
}
.spinner span:last-of-type::after {
  animation-delay: calc(.3s / var(--x-speed));
}
.spinner span:nth-of-type(2)::after {
  animation-delay: calc(.45s / var(--x-speed));
}
.spinner span:first-of-type::before {
  animation-delay: calc(.6s / var(--x-speed));
}
.spinner span:nth-of-type(3)::before {
  animation-delay: calc(.75s / var(--x-speed));
}
.spinner span:last-of-type::before {
  animation-delay: calc(.9s / var(--x-speed));
}
.spinner span:nth-of-type(2)::before {
  animation-delay: calc(1.05s / var(--x-speed));
}